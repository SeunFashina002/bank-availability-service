Bank Availability Service: Junior Engineer Take-Home Assessment
Hi there! This take-home assessment is designed to help us understand your approach to problem-solving, coding, and basic system design. We're excited to see what you build!
The goal is to create a small service that calculates and reports the availability of banks based on simulated transaction data.
🎯
Project Goal
Build a Bank Availability Service that can:
1. Processtransactionstatusdatafordifferentbanks.
2. Calculateanavailabilitypercentageforeachbankoverarecenttimewindow. 3. ExposethisinformationviaasimpleAPI.
🤔
Core Problem to Solve
Imagine we process many transactions involving various banks. Sometimes, a beneficiary bank might be experiencing technical difficulties, leading to failed or delayed transactions. We need a quick way to:
● Estimate how "available" or "healthy" a bank seems based on recent transaction outcomes.
● Use this information to potentially make smarter routing decisions or inform users about issues.
🛠
Your Task: Build the Core Service
For this assessment, you'll implement a simplified version of this service.
Core Functionality Requirements:
● The service MUST calculate bank availability based on transaction status codes.
● Availability MUST be expressed as a percentage.
● The primary calculation MUST use transactions from the last 1 hour.
● The service MUST expose an API endpoint to get the availability of a specific
bank.
● The API response MUST include a "confidence level" for the availability score.
● Calculated data SHOULD be stored (e.g., in memory for this exercise is fine).
🔢
Bank Availability Calculation Logic:
 1. InputData:
○ Your service will need to process transaction outcomes. For this assessment, you can simulate receiving this data. For example, you could:
■
■ ○ Each
■ ■ ■
Create a function that generates a list of sample transaction records.
Hardcode a list of sample transactions.
relevant transaction record should have at least: (String, e.g., "BANK_A", "BANK_B")
(String)
(ISO 8601 String or datetime object, e.g.,
 bank_code
 status_code
 timestamp
"2025-05-26T10:00:00Z")
2. StatusCodesforCalculation:
○ "00": Successful transaction. Counts towards "available" transactions.
○ "91": Beneficiary bank unavailable. Counts towards "unavailable"
transactions. (Other status codes can be ignored for the main task).
3. AvailabilityPercentageFormula:
For a given bank_code and the last 1-hour time window:
○ = Count of transactions with   .
○ = Count of transactions with   . ○=+. ○ If     =null.
○ Else,   =(   /
) * 100.0.
4. ConfidenceLevel:
The confidence level is derived from the total_relevant_transactions for the bank in the time window:
 successful_transactions
status_code="00"
 unavailable_transactions
status_code="91"
   total_relevant_transactions
successful_transactions
unavailable_transactions
total_relevant_transactions == 0
, then
availability_percentage
availability_percentage
successful_transactions
 total_relevant_transactions
 ○ If
○ Else if
○ Else if
○ Else (
5. DataRefresh/ProcessingTrigger:
: "Insufficient Data" : "Low"
: "Medium" ): "High"
total_relevant_transactions == 0
 total_relevant_transactions <= 5
 total_relevant_transactions <= 20
 total_relevant_transactions > 20
○ For this assessment, you can decide how calculations are triggered. It could be:
■ When the API is called (calculate on-demand).

 ■ A simple loop in your service that recalculates every X seconds/minutes (simulating periodic updates).
○ Focus on the calculation logic; complex scheduling isn't required.
🔌
API Endpoint to Implement:
● Endpoint: GET /banks/{bank_code}/availability
● Description: Retrieves the latest calculated availability for a specific bank.
● Path Parameter:
○ bank_code (String, required): The identifier of the bank.
● Success Response (200 OK):
● JSON
Unset
●
   {
     "bank_code": "BANK_A",
     "availability_percentage": 95.24, // or null if "Insufficient
   Data"
     "confidence_level": "High", // "Medium", "Low", or "Insufficient
   Data"
     "time_window": "1h", // The time window used for this calculation
     "last_calculated_at": "2025-05-26T10:30:00Z" // Timestamp of when
   this data was calculated
   }
●
●
● Error Responses:
○ 404 Not Found: If the bank_code is not known or has no data.
○ Consider other relevant HTTP status codes for errors if applicable.
💾
Data Storage:
● Your service needs to store the calculated availability data. For this assessment, in-memory storage is perfectly acceptable (e.g., using dictionaries/maps in your chosen language).
        
 ● You should store at least: ○
 bank_code
 ○ ○ ○ ○ ○
💻
Technical Guidelines
● Language/Framework: You are free to use any programming language and web framework you are comfortable with (e.g., Python with Flask/FastAPI, Node.js with Express, Go, Java with Spring Boot, etc.). Please state your choice in your
availability_percentage
 confidence_level
 (useful for deriving confidence) (e.g.,   )
timestamp
total_transactions_in_window
 status_counts
{"00": count, "91": count}
 last_calculated_at
 submission.
● Code Clarity: Write clean, readable, and well-structured code. Add comments
where appropriate to explain your logic.
● Simplicity: We value simple and effective solutions. Avoid over-engineering.
✅
Testing Your Solution
Please include tests for your service. We recommend focusing on:
1. UnitTests:
○ Test the availability percentage calculation logic with various inputs (e.g.,
all successful, all failed, mixed statuses, zero transactions).
○ Test the confidence level derivation logic.
2. (OptionalbutRecommended)APIInteractionTest:
○ A simple test to verify that your API endpoint returns the expected
structure and data for a known scenario.
📬
Submission Please provide:
1. Yoursourcecode,includinganytestsyou'vewritten. 2. AbriefREADME.mdfileexplaining:
○ Your choice of language/framework.
○ How to build/run your service.
○ How to run your tests.
   
○ Any assumptions you made or design choices you'd like to highlight.
⭐
What We're Looking For
● Correctness: Does the service accurately implement the calculation logic and API as specified?
● Code Quality: Is the code clean, well-organized, maintainable, and easy to understand?
● Problem Solving: Does your solution effectively address the core requirements?
● Testing: Are there sensible tests that cover the core logic?
● Understanding: Does your submission demonstrate a good understanding of
the task?
✨
Bonus Challenges (Optional)
If you have extra time and want to showcase more of your skills, consider implementing one or more of these:
1. MultipleTimeWindows:
○ Extend the service to calculate availability for different time windows (e.g.,
"1h", "6h", "24h").
○ Allow the API client to request a specific time window via a query
parameter (e.g., GET /banks/{bank_code}/availability?window=6h). 2. ExpandedStatusCodes:
○ Modify the calculation to include:
■ "01" (Successful debit, pending credit) - Counts towards "available".
■ "97" (Beneficiary bank timed out) - Counts towards "unavailable".
3. ListAllBanks:
○ Implement a new endpoint GET /banks/availability that returns the availability
data for all monitored banks for a specified (or default) time window. 4. BasicPersistence:
○ Instead of purely in-memory storage, save the calculated availability data to a file (e.g., JSON, CSV) or a simple embedded database (e.g., SQLite).
○ Load this data when the service starts.